import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import { Validators } from '@angular/forms';
import { ListBaseDatepickerComponent } from '../../base/list.base.datepicker.component';
export declare class AmexioMultipleDatePickerComponent extends ListBaseDatepickerComponent<string> implements OnInit, Validators {
    element: ElementRef;
    private cdf;
    fromlabel: string;
    tolabel: string;
    numberofmonths: number;
    inlineDatepicker: boolean;
    disabled: boolean;
    minDate: string;
    maxDate: string;
    diabledDate: any[];
    fromdate: Date;
    todate: Date;
    datepicker: boolean;
    completeDaysArray: any;
    currrentDate: any;
    daysArray: any;
    dateModel: any;
    daysTitle: any;
    alterfromdate: boolean;
    altertodate: boolean;
    backarrowflag: boolean;
    forwardarrowflag: boolean;
    fromcardselected: boolean;
    tocardselected: boolean;
    fromtab: boolean;
    totab: boolean;
    totalwidth: number;
    change: EventEmitter<any>;
    constructor(element: ElementRef, cdf: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    setfromtooncompletedayarray(): void;
    fromPicker(elem: any, event: any): void;
    toPicker(elem: any, event: any): void;
    openPicker(elem: any): void;
    calculateMonthBlocks(): void;
    private createDaysForCurrentMonths(selectedPeriod);
    getFullMonthName(recevieddate: Date): string;
    getFullDayName(receiveddate: Date): string;
    private initDaysTitle();
    validateDays(days: any): void;
    setDisableDaysBeforeFrom(): void;
    resetDisabledaysBeforeFrom(): void;
    onDateClick(dateObj: any, event: any, elem: any): void;
    refactoredOnDateClick(dateObj: any, event: any, elem: any): void;
    onfromCardSelected(dateObj: any, event: any, elem: any): void;
    onToCardSelected(dateObj: any, event: any, elem: any): void;
    setVisibility(dateObj: any): void;
    fromdateRefactored(dateObj: any): void;
    assignFrom(dateObj: any): void;
    assignTo(dateObj: any): void;
    resetRange(): void;
    setRange(): void;
    private disableddays();
    private validateDaysForMinMax();
    refactoredvalidateDaysForMinMax(day: any): void;
    clearFromTo(): void;
    clearFrom(): void;
    clearTo(): void;
    updateMonthList(operation: string, event: any): void;
    incrementMonthList(event: any): void;
    decrementMonthList(event: any): void;
    validateMinMaxDate(): void;
    validateMinDate(): void;
    validateMaxDate(): void;
}
